import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from nltk.corpus import stopwords
from textblob import Word, TextBlob
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from nltk.sentiment import SentimentIntensityAnalyzer
from warnings import filterwarnings
import spacy

filterwarnings('ignore')
pd.set_option('display.max_columns', None)
pd.set_option('display.float_format', lambda x: '%.5f' % x)
pd.set_option('display.width', 200)

1 ##### TEXT PRE-PROCESSING #######
df = pd.read_excel("sentiment-analysis-kozmos/amazon.xlsx")
df.head()
df.info()

# Normalizing Case Folding
df['Review'] = df['Review'].str.lower()

# Punctuations
df['Review'] = df['Review'].str.replace('[^\w\s]', '')

# Numbers
df['Review'] = df['Review'].str.replace('\d', '')

# Stopwords
nltk.download('stopwords')

sw = stopwords.words('english')

df['Review'] = df['Review'].apply(lambda x: " ".join(x for x in str(x).split() if x not in sw))

# Rarewords / Custom Words
sil = pd.Series(' '.join(df['Review']).split()).value_counts()[-1000:]
df['Review'] = df['Review'].apply(lambda x: " ".join(x for x in x.split() if x not in sil))

# Lemmatization  # nltk.download('wordnet')

!pip install -U spacy
!python -m spacy download en_core_web_sm

nlp = spacy.load('en_core_web_sm')
def lemmatize_text(text):
    doc = nlp(text) 
    lemmatized_text = " ".join([token.lemma_ for token in doc])
    return lemmatized_text

df['Review'] = df['Review'].apply(lemmatize_text)
df['Review'].head(10)

2 #####VISUALIZATION #######

#BARPLOT
tf = df["Review"].apply(lambda x: pd.value_counts(x.split(" "))).sum(axis=0).reset_index()
tf.columns = ["words", "tf"]
tf[tf["tf"] > 500].plot.bar(x="words", y="tf")
plt.show()

#WORDCLOUD
text = " ".join(i for i in df.Review)

wordcloud = WordCloud(max_font_size=50,
                      max_words=100,
                      background_color="white").generate(text)
plt.figure()
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.show()

3 #####SENTIMENT ANALYSIS #######

# In this section, we transform unsupervised learning into supervised learning #

nltk.download('vader_lexicon')
# Create the SentimentIntensityAnalyzer

sia = SentimentIntensityAnalyzer()

# Examining polarity scores with the SentimentIntensityAnalyzer object

df["Review"][0:10].apply(lambda x: sia.polarity_scores(x))

df["Review"][0:10].apply(lambda x: sia.polarity_scores(x)["compound"])

df["Review"][0:10].apply(lambda x: "pos" if sia.polarity_scores(x)["compound"] > 0 else "neg")

df["Sentiment_Label"] = df["Review"].apply(lambda x: "pos" if sia.polarity_scores(x)["compound"] > 0 else "neg")

df.groupby("Sentiment_Label")["Star"].mean()

# NOTE: By labeling the comments with SentimentIntensityAnalyzer, the dependent variable for the comment classification machine learning model was created.

4 ###### PREPARATION FOR MACHINE LEARNING! ######

# Test-Train
train_x, test_x, train_y, test_y = train_test_split(df["Review"],
                                                    df["Sentiment_Label"],
                                                    random_state=42)

# TF-IDF Word Level
tf_idf_word_vectorizer = TfidfVectorizer().fit(train_x)
x_train_tf_idf_word = tf_idf_word_vectorizer.transform(train_x)
x_test_tf_idf_word = tf_idf_word_vectorizer.transform(test_x)

5 ###### MODELING (LOGISTIC REGRESSION) ######

log_model = LogisticRegression().fit(x_train_tf_idf_word, train_y)
y_pred = log_model.predict(x_test_tf_idf_word)
print(classification_report(y_pred, test_y))
cross_val_score(log_model, x_test_tf_idf_word, test_y, cv=5).mean()

# Ask the model by choosing randomly from the comments in the series.

random_review = pd.Series(df["Review"].sample(1).values)
yeni_yorum = CountVectorizer().fit(train_x).transform(random_review)
pred = log_model.predict(yeni_yorum)
print(f'Review:  {random_review[0]} \n Prediction: {pred}')

6 ####### MODELING (RANDOM FOREST) #######

rf_model = RandomForestClassifier().fit(x_train_tf_idf_word, train_y)
cross_val_score(rf_model, x_test_tf_idf_word, test_y, cv=5, n_jobs=-1).mean()

# Comparison of logistic regression model results and random forest results: Random Forest=0.90 ,  logistic regression=0.86
